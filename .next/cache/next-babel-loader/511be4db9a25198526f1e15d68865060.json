{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"E:\\\\ReactJS\\\\DeTai3\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\n\nfunction Index(_ref) {\n  var props = _ref.props;\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \"Batman TV Shows\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, props.shows.map(function (_ref2) {\n    var show = _ref2.show;\n    return __jsx(\"li\", {\n      key: show.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, __jsx(Link, {\n      as: \"/p/\".concat(show.id),\n      href: \"/post?id=\".concat(show.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, show.name)));\n  })));\n}\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://api.tvmaze.com/search/shows?q=batman'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          return _context.abrupt(\"return\", {\n            shows: data\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["E:/ReactJS/DeTai3/pages/index.js"],"names":["Link","fetch","Index","props","shows","map","show","id","name","getInitialProps","res","json","data","console","log","length"],"mappings":";;;;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,SAASC,KAAT,OAA0B;AAAA,MAATC,KAAS,QAATA,KAAS;AACtB,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADG,EAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAgB;AAAA,QAAGC,IAAH,SAAGA,IAAH;AAAA,WACb;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAM,MAAA,EAAE,eAAQD,IAAI,CAACC,EAAb,CAAR;AAA2B,MAAA,IAAI,qBAAcD,IAAI,CAACC,EAAnB,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,IAAI,CAACE,IAAT,CADJ,CADJ,CADa;AAAA,GAAhB,CADL,CAFG,CAAP;AAYH;;AAEDN,KAAK,CAACO,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAENR,KAAK,CAAC,8CAAD,CAFC;;AAAA;AAElBS,UAAAA,GAFkB;AAAA;AAAA,2CAGHA,GAAG,CAACC,IAAJ,EAHG;;AAAA;AAGhBC,UAAAA,IAHgB;AAKtBC,UAAAA,OAAO,CAACC,GAAR,qCAAyCF,IAAI,CAACG,MAA9C;AALsB,2CAOf;AACLX,YAAAA,KAAK,EAAEQ;AADF,WAPe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAYA,eAAeV,KAAf","sourcesContent":["\r\nimport Link from 'next/link'\r\nimport fetch from 'isomorphic-unfetch'\r\n\r\nfunction Index({ props }) {\r\n    return <div>\r\n        <h1>Batman TV Shows</h1>\r\n        <ul>\r\n            {props.shows.map(({ show }) => (\r\n                <li key={show.id}>\r\n                    <Link as={`/p/${show.id}`} href={`/post?id=${show.id}`}>\r\n                        <a>{show.name}</a>\r\n                    </Link>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    </div>\r\n}\r\n\r\nIndex.getInitialProps = async function() {\r\n//   const res = await fetch('http://www.omdbapi.com/?s=inception&apikey=dd31b83b')\r\nconst res = await fetch('https://api.tvmaze.com/search/shows?q=batman')\r\n  const data = await res.json()\r\n\r\n  console.log(`Show data fetched. Count: ${data.length}`)\r\n\r\n  return {\r\n    shows: data\r\n  }\r\n}\r\n\r\nexport default Index"]},"metadata":{},"sourceType":"module"}